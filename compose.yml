version: "3.9"

x-common: &common
  image: registry.anttek.io/kapusta/telegram-exchange-rates-bot:${TAG:-latest}
  deploy:
    mode: replicated
    replicas: 1
    restart_policy:
      condition: any
      delay: 5s
      max_attempts: 5
      window: 60s
    rollback_config:
      delay: 10s
      failure_action: continue
      order: start-first
      parallelism: 1
    update_config:
      delay: 10s
      failure_action: rollback
      order: start-first
      parallelism: 1
#  restart: always

x-db-name: &DB_NAME kapusta_telegram_bot
x-db-user: &DB_USER kapusta_telegram_bot
x-db-password: &DB_PASSWORD kapusta_telegram_bot

x-common-env: &common-env
  BOT_TOKEN: ${BOT_TOKEN?Variable BOT_TOKEN is required}
  GETGEOAPI_KEY: ${GETGEOAPI_KEY?Variable GETGEOAPI_KEY is required}
  REDIS_BASE_URL: redis://redis:6379
  DB_HOST: postgres
  DB_PORT: 5432
  DB_NAME: *DB_NAME
  DB_USER: *DB_USER
  DB_PASSWORD: *DB_PASSWORD

x-common-volumes:
  volumes:
    - &uploads uploads:/home/appuser/uploads

services:
  postgres:
    image: postgres:15
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      rollback_config:
        delay: 10s
        failure_action: continue
        order: stop-first
        parallelism: 1
      update_config:
        delay: 10s
        failure_action: rollback
        order: stop-first
        parallelism: 1
    environment:
      POSTGRES_DB: *DB_NAME
      POSTGRES_USER: *DB_USER
      POSTGRES_PASSWORD: *DB_PASSWORD
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", *DB_NAME, "-U", *DB_USER ]
      interval: 5s
      timeout: 1s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  redis:
    image: redis:alpine
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.125"
          memory: 64M
        reservations:
          cpus: "0.0625"
          memory: 32M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      rollback_config:
        delay: 10s
        failure_action: continue
        order: stop-first
        parallelism: 1
      update_config:
        delay: 10s
        failure_action: rollback
        order: stop-first
        parallelism: 1
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 1s
      retries: 10
    volumes:
      - redis_data:/data

  bot:
    <<: *common
    build: .
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    environment:
      <<: *common-env
    volumes:
      - *uploads

  celery-worker:
    <<: *common
    command: -A core worker -l info -P prefork -c 2 -E -B
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    entrypoint: celery
    environment:
      <<: *common-env
    volumes:
      - *uploads

volumes:
  postgres_data:
  redis_data:
  uploads:
